<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.worksystem.mapper.UserMapper">

    <!-- 기본 User ResultMap -->
    <resultMap id="UserMap" type="com.worksystem.entity.User">
        <id property="userSeq" column="user_seq"/>
        <result property="userId" column="user_id"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="department" column="department"/>
        <result property="isActive" column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="lastLoginAt" column="last_login_at"/>
    </resultMap>

    <!-- UserDTO with Groups ResultMap - 수정된 버전 -->
    <resultMap id="UserDTOMap" type="com.worksystem.dto.UserDTO">
        <id property="userSeq" column="user_seq"/>
        <result property="userId" column="user_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="department" column="department"/>
        <result property="isActive" column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="primaryGroupId" column="primary_group_id"/>
        <result property="primaryGroupName" column="primary_group_name"/>
        <!-- 문자열로 변경 -->
        <result property="groupIds" column="group_ids_concat"/>
        <result property="groupNames" column="group_names_concat"/>
    </resultMap>

    <!-- 사용자 ID로 사용자 조회 -->
    <select id="findByUserId" resultMap="UserMap">
        SELECT * 
        FROM users 
        WHERE user_id = #{userId} AND is_active = true
    </select>

    <!-- 사용자와 그룹 정보 함께 조회 -->
    <select id="findUserWithGroupsByUserId" resultMap="UserDTOMap">
        SELECT 
            u.user_seq,
            u.user_id, 
            u.name, 
            u.email, 
            u.department,
            u.is_active,
            u.created_at,
            u.updated_at,
            u.last_login_at,
            (SELECT ug2.group_id 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_id,
            (SELECT ug2.group_name 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_name,
            (SELECT GROUP_CONCAT(ug3.group_id ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_ids_concat,
            (SELECT GROUP_CONCAT(ug3.group_name ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_names_concat
        FROM users u
        WHERE u.user_id = #{userId} AND u.is_active = true
    </select>

    <!-- 사용자의 그룹 ID 목록 조회 -->
    <select id="findGroupIdsByUserId" resultType="String">
        SELECT ug.group_id
        FROM user_group_mappings ugm
        JOIN user_groups ug ON ugm.group_id = ug.group_id
        WHERE ugm.user_id = #{userId} AND ug.is_active = true
        ORDER BY ug.level DESC
    </select>

    <!-- 모든 사용자를 그룹 정보와 함께 조회 - 수정된 버전 -->
    <select id="findAllUsersWithGroups" resultMap="UserDTOMap">
        SELECT 
            u.user_seq,
            u.user_id, 
            u.name, 
            u.email, 
            u.department,
            u.is_active,
            u.created_at,
            u.updated_at,
            u.last_login_at,
            (SELECT ug2.group_id 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             AND ug2.is_active = true
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_id,
            (SELECT ug2.group_name 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             AND ug2.is_active = true
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_name,
            (SELECT GROUP_CONCAT(ug3.group_id ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_ids_concat,
            (SELECT GROUP_CONCAT(ug3.group_name ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_names_concat
        FROM users u
        WHERE u.is_active = true
        ORDER BY u.user_id
    </select>

    <!-- 사용자 검색 (그룹 정보 포함) - 수정된 버전 -->
    <select id="searchUsersWithGroups" resultMap="UserDTOMap">
        SELECT DISTINCT
            u.user_seq,
            u.user_id, 
            u.name, 
            u.email, 
            u.department,
            u.is_active,
            u.created_at,
            u.updated_at,
            u.last_login_at,
            (SELECT ug2.group_id 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             AND ug2.is_active = true
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_id,
            (SELECT ug2.group_name 
             FROM user_group_mappings ugm2 
             JOIN user_groups ug2 ON ugm2.group_id = ug2.group_id 
             WHERE ugm2.user_id = u.user_id 
             AND ug2.is_active = true
             ORDER BY ug2.level DESC 
             LIMIT 1) as primary_group_name,
            (SELECT GROUP_CONCAT(ug3.group_id ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_ids_concat,
            (SELECT GROUP_CONCAT(ug3.group_name ORDER BY ug3.level DESC SEPARATOR ';')
             FROM user_group_mappings ugm3 
             JOIN user_groups ug3 ON ugm3.group_id = ug3.group_id 
             WHERE ugm3.user_id = u.user_id 
             AND ug3.is_active = true) as group_names_concat
        FROM users u
        LEFT JOIN user_group_mappings ugm ON u.user_id = ugm.user_id
        LEFT JOIN user_groups ug ON ugm.group_id = ug.group_id
        WHERE u.is_active = true
        <if test="userId != null and userId != ''">
            AND u.user_id LIKE CONCAT('%', #{userId}, '%')
        </if>
        <if test="name != null and name != ''">
            AND u.name LIKE CONCAT('%', #{name}, '%')
        </if>
        <if test="department != null and department != ''">
            AND u.department LIKE CONCAT('%', #{department}, '%')
        </if>
        <if test="groupId != null and groupId != ''">
            AND ug.group_id = #{groupId}
        </if>
        ORDER BY u.user_id
    </select>

    <!-- 기존 쿼리들 -->
    <select id="findAll" resultMap="UserMap">
        SELECT * FROM users WHERE is_active = true ORDER BY user_id
    </select>

    <select id="findById" resultMap="UserMap">
        SELECT * FROM users WHERE user_seq = #{id}
    </select>

    <select id="findByDepartment" resultMap="UserMap">
        SELECT * FROM users WHERE department = #{department} AND is_active = true
    </select>

    <!-- 사용자 삽입 -->
    <insert id="insert" parameterType="com.worksystem.entity.User" useGeneratedKeys="true" keyProperty="userSeq">
        INSERT INTO users (user_id, password, name, email, department, is_active, created_at, updated_at)
        VALUES (#{userId}, #{password}, #{name}, #{email}, #{department}, #{isActive}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- 사용자 업데이트 -->
    <update id="update">
        UPDATE users 
        SET name = #{name},
            email = #{email},
            department = #{department},
            is_active = #{isActive},
            updated_at = #{updatedAt}
        WHERE user_seq = #{userSeq}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteById">
        UPDATE users SET is_active = false WHERE user_seq = #{id}
    </delete>

    <!-- 마지막 로그인 시간 업데이트 -->
    <update id="updateLastLoginAt">
        UPDATE users 
        SET last_login_at = #{lastLoginAt}, 
            updated_at = NOW()
        WHERE user_id = #{userId} 
        AND is_active = true
    </update>

    <!-- 사용자 ID로 삭제 (비활성화) -->
    <update id="deleteByUserId">
        UPDATE users 
        SET is_active = false, 
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE users 
        SET password = #{password}, 
            updated_at = NOW()
        WHERE user_id = #{userId} 
        AND is_active = true
    </update>

    <!-- 사용자-그룹 매핑 추가 -->
    <insert id="insertUserGroupMapping">
        INSERT INTO user_group_mappings (user_id, group_id, created_at)
        VALUES (#{userId}, #{groupId}, NOW())
    </insert>

    <!-- 사용자-그룹 매핑 삭제 (사용자의 모든 그룹) -->
    <delete id="deleteUserGroupMappings">
        DELETE FROM user_group_mappings 
        WHERE user_id = #{userId}
    </delete>

</mapper>